CHAPTER 1:
+++++++++

1.2 Related works
=================

CHANGES RECOMMENDED BY PROBODH: MORE DISCUSSION
------------------------------

CHANGES TO BE DONE:
------------------

AlternativeTo : 

	+ Provides alternative of all kinds
	+ Not FS oriented as such
	+ No license checker module implemented
	+ Not community driven

1.4 Organizaton of report
==========================

ADD CONTENT HERE


CHAPTER 2:
+++++++++

CHANGES RECOMMENDED BY PROBODH: ADD MORE INTRODUCTION
------------------------------

SO ADD MORE INTRODUCTION

2.1 XP
======

CHANGES RECOMMENDED BY PROBODH: Add Justication of usage
------------------------------

SO ADD IT

-Remove api end points from here & include in IMPLEMENTATION.



I WILL ADD FUNCTIONAL SPECIFICATIONS

FUNCTIONAL SPECIFICATIONS:
==========================

1. Search Softwares

Name of module : searchProprietarySoftware
Parameters : Text entered by the user at the front end
Purpose : This functional component will be used to search for proprietary softwares that 
have already been requested by some user to get its alternatives.

2. Request for alternatives for a software

Name of module : addProprietarySoftwares
Parameters : The name of the software for which alternatives are desired, tags defining the software.
Purpose : This functional component is used when a user wants to request for alternatives to a proprietary software that in not already available on the platform. The user will need to specify the name of the software along with the tags to cateogarize the software, which can be later used to fetch the alternatives.

3. Suggest alternatives

Name of module : addAlternatives
Parameters : The name of the alternative software along with the handle which uniquely categorizes the software 
Purpose : This functional component is used when the user wishes to add a new alternative software to the 

4. Check license of a software

Name of module : checkLicense
Parameters : Name of the software for which the license is to be checked
Purpose : This functional component will be used to show the license under which the software is published. The user can also get more detailed information about the license via this module. The license for the software will be specified by the user who suggested the alternative.

5. Upvote/Downvote a particular alternative

Name of module : upVote/downVote
Parameters : A unique identifier for the software which will be picked up by the front end during the user's interaction with the voting feature
Purpose : This functional component is utilized when the user wishes to upvote or downvote a software 

6. Signup/Login/Authenticate

Name of module : authenticate/register
Parameters : The required user credentials depending on the operation to be performed
Purpose : Used to start a session by either logging in the user or creating a new user in case the corresponding entry for the user does not exist. This module will also authenticate the user in case he wishes to login by checking the userid and password. For security reasons, the password hash is stored rather than the password in clear text.




*ARCHITECTUTRE EXPLAINATION
===========================

As the architecture shows, the application works in five different layers - Data layer, data access layer, middleware, service layer and presentation layer. The explaination of each of these layers is as follows:

1. Data Layer : This layer will deal with the data source, i.e the database which is used to store all the data necessary for this application to function. This is the MongoDB database in our case, which is a free and NoSQL database. The data to be stored is the user data and the data related to the softwares and their alternatives.

2. Data Access Layer : This layer will deal with accessing the data that is stored in the database and changing it to a format which can be used by the application for further processing, such as creating objects out of the documents stored in the MongoDB database. This layer will comprise of modules consisting of functions to deal with both the user data and the software data stored at the data layer.

3. Middleware : This layer consists of middleware which deals with add-on tasks such as input validation, session handling using express, user authentication and registration. Various other minor middlewares are also used throughout the project which aid in integration of the data access layer with the service layer.

4. Service layer : This layer is the one responsible for getting the validated data through RESTful api end points and presenting it to the user on the front end as well as take the input from user, send it to the middleware for further validation before storing it in the database. Basically, this layer is used to glue together the front-end to the back-end.

5. Presentation layer : This layer is the one which will be directly accessible to the user and the point via which the user interacts with the application. It is designed using the React Framework and consists of various forms, fields, tables  and components to enable the user to perform various actions like searching, posting data, retrieving data, voting et cetera which enable the smooth functioning of the application.
